–í—ã –ø—Ä–∞–≤—ã, —è –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –í–æ—Ç –≤—Å–µ –∫–æ–¥—ã, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –±–ª–æ–∫–∞—Ö:

### app.py
```python
import logging
from fastapi import FastAPI
from fastapi.responses import HTMLResponse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# HTML —à–∞–±–ª–æ–Ω —Å Puter.js –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
HTML_TEMPLATE = """
<!DOCTYPE html>
<html>
<head>
    <title>Claude 3.5 Sonnet Chat</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        :root {
            --bg-color: #ffffff;
            --text-color: #000000;
            --user-bg: #e6f3ff;
            --assistant-bg: #f0f0f0;
            --border-color: #ccc;
            --header-color: #333;
            --button-bg: #4a90e2;
            --button-text: white;
            --input-bg: white;
            --code-bg: #f5f5f5;
            --code-border: #ddd;
        }
        
        .dark-mode {
            --bg-color: #1e1e1e;
            --text-color: #e0e0e0;
            --user-bg: #2c4b6e;
            --assistant-bg: #2d2d2d;
            --border-color: #444;
            --header-color: #e0e0e0;
            --button-bg: #2a5a9e;
            --button-text: #e0e0e0;
            --input-bg: #333;
            --code-bg: #2d2d2d;
            --code-border: #444;
        }
        
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background-color: var(--bg-color);
            color: var(--text-color);
            transition: background-color 0.3s, color 0.3s;
        }
        
        h1 {
            color: var(--header-color);
        }
        
        .chat-container {
            height: 400px;
            overflow-y: auto;
            border: 1px solid var(--border-color);
            padding: 10px;
            margin-bottom: 10px;
            background-color: var(--bg-color);
        }
        
        .message {
            margin: 5px 0;
            padding: 5px;
            border-radius: 5px;
            word-wrap: break-word;
        }
        
        .user {
            background-color: var(--user-bg);
            margin-left: 20%;
        }
        
        .assistant {
            background-color: var(--assistant-bg);
            margin-right: 20%;
        }
        
        #input {
            width: calc(100% - 12px);
            padding: 8px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            background-color: var(--input-bg);
            color: var(--text-color);
        }
        
        button {
            padding: 8px 12px;
            background-color: var(--button-bg);
            color: var(--button-text);
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px 5px 5px 0;
        }
        
        button:hover {
            opacity: 0.9;
        }
        
        .toolbar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
        }
        
        .toolbar-left, .toolbar-right {
            display: flex;
            gap: 5px;
        }
        
        .code-block {
            background-color: var(--code-bg);
            border: 1px solid var(--code-border);
            border-radius: 4px;
            padding: 10px;
            margin: 10px 0;
            position: relative;
            font-family: monospace;
            white-space: pre-wrap;
        }
        
        .copy-button {
            position: absolute;
            top: 5px;
            right: 5px;
            padding: 3px 6px;
            font-size: 12px;
            background-color: var(--button-bg);
            color: var(--button-text);
            border: none;
            border-radius: 3px;
            cursor: pointer;
        }
        
        .file-input-container {
            margin-top: 10px;
            margin-bottom: 10px;
        }
        
        #file-list {
            margin-top: 5px;
            font-size: 0.9em;
        }
        
        .file-item {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
        
        .remove-file {
            margin-left: 5px;
            cursor: pointer;
            color: red;
        }
        
        /* –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ */
        @media (max-width: 600px) {
            body {
                padding: 10px;
            }
            
            .toolbar {
                flex-direction: column;
                gap: 10px;
            }
            
            .toolbar-left, .toolbar-right {
                justify-content: center;
            }
            
            .user {
                margin-left: 10%;
            }
            
            .assistant {
                margin-right: 10%;
            }
            
            button {
                padding: 10px;
            }
            
            h1 {
                font-size: 1.5em;
                text-align: center;
            }
        }
        
        /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ */
        .fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 9999;
            margin: 0;
            max-width: none;
            padding: 20px;
            box-sizing: border-box;
        }
        
        .fullscreen .chat-container {
            height: calc(100vh - 200px);
        }
    </style>
</head>
<body>
    <script src="https://js.puter.com/v2/"></script>
    <h1>–ß–∞—Ç —Å Claude 3.5 Sonnet</h1>
    
    <div class="toolbar">
        <div class="toolbar-left">
            <button id="dark-mode-toggle" onclick="toggleDarkMode()">üåô –¢—ë–º–Ω—ã–π —Ä–µ–∂–∏–º</button>
            <button id="fullscreen-toggle" onclick="toggleFullscreen()">‚õ∂ –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω</button>
        </div>
        <div class="toolbar-right">
            <button onclick="clearHistory()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é</button>
        </div>
    </div>
    
    <div id="chat" class="chat-container"></div>
    
    <div class="file-input-container">
        <input type="file" id="file-input" multiple>
        <div id="file-list"></div>
    </div>
    
    <input id="input" type="text" placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." onkeypress="handleKeyPress(event)">
    <button onclick="sendMessage()">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>

    <script>
        const chat = document.getElementById('chat');
        const input = document.getElementById('input');
        const fileInput = document.getElementById('file-input');
        const fileList = document.getElementById('file-list');
        const MAX_HISTORY_LENGTH = 9999;  // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏
        let selectedFiles = [];
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–º—ã –∏–∑ localStorage
        const isDarkMode = localStorage.getItem('darkMode') === 'true';
        if (isDarkMode) {
            document.body.classList.add('dark-mode');
            document.getElementById('dark-mode-toggle').textContent = '‚òÄÔ∏è –°–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º';
        }
        
        // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        function toggleDarkMode() {
            const isDark = document.body.classList.toggle('dark-mode');
            localStorage.setItem('darkMode', isDark);
            document.getElementById('dark-mode-toggle').textContent = isDark ? '‚òÄÔ∏è –°–≤–µ—Ç–ª—ã–π —Ä–µ–∂–∏–º' : 'üåô –¢—ë–º–Ω—ã–π —Ä–µ–∂–∏–º';
        }
        
        // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        function toggleFullscreen() {
            const isFullscreen = document.body.classList.toggle('fullscreen');
            document.getElementById('fullscreen-toggle').textContent = isFullscreen ? '‚õ∂ –í—ã–π—Ç–∏ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞' : '‚õ∂ –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω';
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑ localStorage –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        let conversationHistory = JSON.parse(localStorage.getItem('conversationHistory')) || [];

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –≤ localStorage
        function saveHistory() {
            localStorage.setItem('conversationHistory', JSON.stringify(conversationHistory));
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
        function clearHistory() {
            conversationHistory = [];
            saveHistory();
            chat.innerHTML = '';  // –û—á–∏—â–∞–µ–º —á–∞—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        fileInput.addEventListener('change', function(e) {
            handleFileSelection(e.target.files);
        });
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        async function handleFileSelection(files) {
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ 10 –ú–ë
                if (file.size > 10 * 1024 * 1024) {
                    alert(`–§–∞–π–ª ${file.name} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä - 10 –ú–ë.`);
                    continue;
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
                selectedFiles.push(file);
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–∫–µ
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <span>${file.name} (${formatFileSize(file.size)})</span>
                    <span class="remove-file" data-index="${selectedFiles.length - 1}">‚úñ</span>
                `;
                fileList.appendChild(fileItem);
            }
            
            // –û—á–∏—â–∞–µ–º input, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ –∂–µ —Ñ–∞–π–ª—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ
            fileInput.value = '';
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–¥–∞–ª–µ–Ω–∏—è
            document.querySelectorAll('.remove-file').forEach(button => {
                button.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    removeFile(index);
                });
            });
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
        function removeFile(index) {
            selectedFiles.splice(index, 1);
            updateFileList();
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        function updateFileList() {
            fileList.innerHTML = '';
            selectedFiles.forEach((file, index) => {
                const fileItem = document.createElement('div');
                fileItem.className = 'file-item';
                fileItem.innerHTML = `
                    <span>${file.name} (${formatFileSize(file.size)})</span>
                    <span class="remove-file" data-index="${index}">‚úñ</span>
                `;
                fileList.appendChild(fileItem);
            });
            
            document.querySelectorAll('.remove-file').forEach(button => {
                button.addEventListener('click', function() {
                    const index = parseInt(this.getAttribute('data-index'));
                    removeFile(index);
                });
            });
        }
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        function formatFileSize(bytes) {
            if (bytes < 1024) return bytes + ' B';
            else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
            else return (bytes / 1048576).toFixed(1) + ' MB';
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        function processCodeBlocks(text) {
            // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ (–º–µ–∂–¥—É ```)
            const codeBlockRegex = /```([\s\S]*?)```/g;
            
            // –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            return text.replace(codeBlockRegex, function(match, code) {
                const language = code.split('\\n')[0].trim();
                const codeContent = language && !language.includes(' ') ? 
                    code.substring(language.length).trim() : code;
                
                return `<div class="code-block">
                    ${language && !language.includes(' ') ? `<div class="language">${language}</div>` : ''}
                    <button class="copy-button" onclick="copyCode(this)">–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å</button>
                    <pre>${codeContent}</pre>
                </div>`;
            });
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
        function copyCode(button) {
            const codeBlock = button.nextElementSibling;
            const textToCopy = codeBlock.textContent;
            
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    button.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                    setTimeout(() => {
                        button.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
                    }, 2000);
                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ', err);
                    button.textContent = '–û—à–∏–±–∫–∞';
                    setTimeout(() => {
                        button.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
                    }, 2000);
                });
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
        function addMessage(content, isUser) {
            const message = document.createElement('div');
            message.className = `message ${isUser ? 'user' : 'assistant'}`;
            
            if (isUser) {
                message.textContent = content;
            } else {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
                message.innerHTML = processCodeBlocks(content);
            }
            
            chat.appendChild(message);
            chat.scrollTop = chat.scrollHeight;
        }

        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        conversationHistory.forEach(msg => {
            addMessage(msg.content, msg.role === 'user');
        });

        async function sendMessage() {
            const message = input.value.trim();
            if (!message && selectedFiles.length === 0) return;

            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç
            let userMessage = message;
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∏—Ö
            if (selectedFiles.length > 0) {
                userMessage += `\n\n–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: ${selectedFiles.map(f => f.name).join(', ')}`;
            }
            
            addMessage(userMessage, true);
            input.value = '';

            try {
                // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                let messagesToSend = [];
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                messagesToSend.push({ role: 'user', content: message });
                
                // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
                if (selectedFiles.length > 0) {
                    for (const file of selectedFiles) {
                        try {
                            // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                            const fileContent = await readFileAsText(file);
                            
                            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                            messagesToSend.push({
                                role: 'user',
                                content: `–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${file.name}:\n\n${fileContent}`
                            });
                        } catch (error) {
                            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file.name}:`, error);
                            addMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${file.name}: ${error.message}`, false);
                        }
                    }
                    
                    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    selectedFiles = [];
                    fileList.innerHTML = '';
                }
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –∏—Å—Ç–æ—Ä–∏–µ–π, –Ω–æ —Å–æ–±–ª—é–¥–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
                const fullHistory = [...conversationHistory, ...messagesToSend];
                const historyToSend = fullHistory.slice(-MAX_HISTORY_LENGTH);
                
                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
                conversationHistory = historyToSend;
                saveHistory();

                // –í—ã–∑—ã–≤–∞–µ–º Puter.js AI –Ω–∞ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —Å—Ç–æ—Ä–æ–Ω–µ —Å –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–µ–π
                const response = await puter.ai.chat(historyToSend, {
                    model: 'claude-3-5-sonnet',
                    stream: true
                });

                let fullResponse = '';
                for await (const part of response) {
                    fullResponse += part?.text || '';
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å—Ç–µ–π –æ—Ç–≤–µ—Ç–∞
                    const lastMessage = chat.querySelector('.message.assistant:last-child');
                    if (lastMessage) {
                        lastMessage.innerHTML = processCodeBlocks(fullResponse);
                    } else {
                        addMessage(fullResponse, false);
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                conversationHistory.push({ role: 'assistant', content: fullResponse });
                saveHistory();  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é

            } catch (error) {
                addMessage('–û—à–∏–±–∫–∞: ' + error.message, false);
            }
        }
        
        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        function readFileAsText(file) {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = event => resolve(event.target.result);
                reader.onerror = error => reject(error);
                reader.readAsText(file);
            });
        }

        function handleKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }
        
        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
        window.copyCode = function(button) {
            const codeBlock = button.nextElementSibling;
            const textToCopy = codeBlock.textContent;
            
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    button.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                    setTimeout(() => {
                        button.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
                    }, 2000);
                })
                .catch(err => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏: ', err);
                    button.textContent = '–û—à–∏–±–∫–∞';
                    setTimeout(() => {
                        button.textContent = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å';
                    }, 2000);
                });
        };
    </script>
</body>
</html>
"""

app = FastAPI()

@app.get("/", response_class=HTMLResponse)
async def serve_chat():
    return HTML_TEMPLATE

@app.get("/favicon.ico", include_in_schema=False)
async def favicon():
    return {"message": "No favicon"}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=7860)
